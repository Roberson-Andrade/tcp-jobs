/*
 * This file is generated by jOOQ.
 */
package codegen.jooq.tables;


import codegen.jooq.Keys;
import codegen.jooq.Public;
import codegen.jooq.tables.Applicant.ApplicantPath;
import codegen.jooq.tables.Competence.CompetencePath;
import codegen.jooq.tables.records.ApplicantCompetenceRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ApplicantCompetence extends TableImpl<ApplicantCompetenceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.APPLICANT_COMPETENCE</code>
     */
    public static final ApplicantCompetence APPLICANT_COMPETENCE = new ApplicantCompetence();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApplicantCompetenceRecord> getRecordType() {
        return ApplicantCompetenceRecord.class;
    }

    /**
     * The column <code>PUBLIC.APPLICANT_COMPETENCE.ID</code>.
     */
    public final TableField<ApplicantCompetenceRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.APPLICANT_COMPETENCE.COMPETENCE_ID</code>.
     */
    public final TableField<ApplicantCompetenceRecord, String> COMPETENCE_ID = createField(DSL.name("COMPETENCE_ID"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.APPLICANT_COMPETENCE.APPLICANT_EMAIL</code>.
     */
    public final TableField<ApplicantCompetenceRecord, String> APPLICANT_EMAIL = createField(DSL.name("APPLICANT_EMAIL"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.APPLICANT_COMPETENCE.EXPERIENCE</code>.
     */
    public final TableField<ApplicantCompetenceRecord, Integer> EXPERIENCE = createField(DSL.name("EXPERIENCE"), SQLDataType.INTEGER.nullable(false), this, "");

    private ApplicantCompetence(Name alias, Table<ApplicantCompetenceRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ApplicantCompetence(Name alias, Table<ApplicantCompetenceRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>PUBLIC.APPLICANT_COMPETENCE</code> table
     * reference
     */
    public ApplicantCompetence(String alias) {
        this(DSL.name(alias), APPLICANT_COMPETENCE);
    }

    /**
     * Create an aliased <code>PUBLIC.APPLICANT_COMPETENCE</code> table
     * reference
     */
    public ApplicantCompetence(Name alias) {
        this(alias, APPLICANT_COMPETENCE);
    }

    /**
     * Create a <code>PUBLIC.APPLICANT_COMPETENCE</code> table reference
     */
    public ApplicantCompetence() {
        this(DSL.name("APPLICANT_COMPETENCE"), null);
    }

    public <O extends Record> ApplicantCompetence(Table<O> path, ForeignKey<O, ApplicantCompetenceRecord> childPath, InverseForeignKey<O, ApplicantCompetenceRecord> parentPath) {
        super(path, childPath, parentPath, APPLICANT_COMPETENCE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ApplicantCompetencePath extends ApplicantCompetence implements Path<ApplicantCompetenceRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ApplicantCompetencePath(Table<O> path, ForeignKey<O, ApplicantCompetenceRecord> childPath, InverseForeignKey<O, ApplicantCompetenceRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ApplicantCompetencePath(Name alias, Table<ApplicantCompetenceRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ApplicantCompetencePath as(String alias) {
            return new ApplicantCompetencePath(DSL.name(alias), this);
        }

        @Override
        public ApplicantCompetencePath as(Name alias) {
            return new ApplicantCompetencePath(alias, this);
        }

        @Override
        public ApplicantCompetencePath as(Table<?> alias) {
            return new ApplicantCompetencePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ApplicantCompetenceRecord, Integer> getIdentity() {
        return (Identity<ApplicantCompetenceRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ApplicantCompetenceRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_A;
    }

    @Override
    public List<ForeignKey<ApplicantCompetenceRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONSTRAINT_A4, Keys.CONSTRAINT_A46);
    }

    private transient CompetencePath _competence;

    /**
     * Get the implicit join path to the <code>PUBLIC.COMPETENCE</code> table.
     */
    public CompetencePath competence() {
        if (_competence == null)
            _competence = new CompetencePath(this, Keys.CONSTRAINT_A4, null);

        return _competence;
    }

    private transient ApplicantPath _applicant;

    /**
     * Get the implicit join path to the <code>PUBLIC.APPLICANT</code> table.
     */
    public ApplicantPath applicant() {
        if (_applicant == null)
            _applicant = new ApplicantPath(this, Keys.CONSTRAINT_A46, null);

        return _applicant;
    }

    @Override
    public ApplicantCompetence as(String alias) {
        return new ApplicantCompetence(DSL.name(alias), this);
    }

    @Override
    public ApplicantCompetence as(Name alias) {
        return new ApplicantCompetence(alias, this);
    }

    @Override
    public ApplicantCompetence as(Table<?> alias) {
        return new ApplicantCompetence(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ApplicantCompetence rename(String name) {
        return new ApplicantCompetence(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ApplicantCompetence rename(Name name) {
        return new ApplicantCompetence(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ApplicantCompetence rename(Table<?> name) {
        return new ApplicantCompetence(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ApplicantCompetence where(Condition condition) {
        return new ApplicantCompetence(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ApplicantCompetence where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ApplicantCompetence where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ApplicantCompetence where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ApplicantCompetence where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ApplicantCompetence where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ApplicantCompetence where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ApplicantCompetence where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ApplicantCompetence whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ApplicantCompetence whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
