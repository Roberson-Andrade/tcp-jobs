/*
 * This file is generated by jOOQ.
 */
package codegen.jooq.tables;


import codegen.jooq.Keys;
import codegen.jooq.Public;
import codegen.jooq.tables.Company.CompanyPath;
import codegen.jooq.tables.Competence.CompetencePath;
import codegen.jooq.tables.JobCompetence.JobCompetencePath;
import codegen.jooq.tables.records.JobRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Job extends TableImpl<JobRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.JOB</code>
     */
    public static final Job JOB = new Job();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JobRecord> getRecordType() {
        return JobRecord.class;
    }

    /**
     * The column <code>PUBLIC.JOB.ID</code>.
     */
    public final TableField<JobRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.JOB.COMPANY_EMAIL</code>.
     */
    public final TableField<JobRecord, String> COMPANY_EMAIL = createField(DSL.name("COMPANY_EMAIL"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.JOB.NAME</code>.
     */
    public final TableField<JobRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.JOB.FIELD</code>.
     */
    public final TableField<JobRecord, String> FIELD = createField(DSL.name("FIELD"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.JOB.SALARY_RANGE</code>.
     */
    public final TableField<JobRecord, String> SALARY_RANGE = createField(DSL.name("SALARY_RANGE"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.JOB.SKILL</code>.
     */
    public final TableField<JobRecord, String> SKILL = createField(DSL.name("SKILL"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.JOB.EXPERIENCE</code>.
     */
    public final TableField<JobRecord, String> EXPERIENCE = createField(DSL.name("EXPERIENCE"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.JOB.DESCRIPTION</code>.
     */
    public final TableField<JobRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.VARCHAR(1000000000), this, "");

    private Job(Name alias, Table<JobRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Job(Name alias, Table<JobRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>PUBLIC.JOB</code> table reference
     */
    public Job(String alias) {
        this(DSL.name(alias), JOB);
    }

    /**
     * Create an aliased <code>PUBLIC.JOB</code> table reference
     */
    public Job(Name alias) {
        this(alias, JOB);
    }

    /**
     * Create a <code>PUBLIC.JOB</code> table reference
     */
    public Job() {
        this(DSL.name("JOB"), null);
    }

    public <O extends Record> Job(Table<O> path, ForeignKey<O, JobRecord> childPath, InverseForeignKey<O, JobRecord> parentPath) {
        super(path, childPath, parentPath, JOB);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class JobPath extends Job implements Path<JobRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> JobPath(Table<O> path, ForeignKey<O, JobRecord> childPath, InverseForeignKey<O, JobRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private JobPath(Name alias, Table<JobRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public JobPath as(String alias) {
            return new JobPath(DSL.name(alias), this);
        }

        @Override
        public JobPath as(Name alias) {
            return new JobPath(alias, this);
        }

        @Override
        public JobPath as(Table<?> alias) {
            return new JobPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<JobRecord, Integer> getIdentity() {
        return (Identity<JobRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<JobRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_1;
    }

    @Override
    public List<ForeignKey<JobRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONSTRAINT_11);
    }

    private transient CompanyPath _company;

    /**
     * Get the implicit join path to the <code>PUBLIC.COMPANY</code> table.
     */
    public CompanyPath company() {
        if (_company == null)
            _company = new CompanyPath(this, Keys.CONSTRAINT_11, null);

        return _company;
    }

    private transient JobCompetencePath _jobCompetence;

    /**
     * Get the implicit to-many join path to the
     * <code>PUBLIC.JOB_COMPETENCE</code> table
     */
    public JobCompetencePath jobCompetence() {
        if (_jobCompetence == null)
            _jobCompetence = new JobCompetencePath(this, null, Keys.CONSTRAINT_12.getInverseKey());

        return _jobCompetence;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>PUBLIC.COMPETENCE</code> table
     */
    public CompetencePath competence() {
        return jobCompetence().competence();
    }

    @Override
    public Job as(String alias) {
        return new Job(DSL.name(alias), this);
    }

    @Override
    public Job as(Name alias) {
        return new Job(alias, this);
    }

    @Override
    public Job as(Table<?> alias) {
        return new Job(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Job rename(String name) {
        return new Job(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Job rename(Name name) {
        return new Job(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Job rename(Table<?> name) {
        return new Job(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Job where(Condition condition) {
        return new Job(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Job where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Job where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Job where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Job where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Job where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Job where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Job where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Job whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Job whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
